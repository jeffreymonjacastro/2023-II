// Example: Test ARM processor

// MAIN	 SUB R0, R15, R15 	; R0 = 0				
E04F000F
// ADD R2, R0, #5      	; R2 = 5             
E2802005
// ADD R3, R0, #12    	; R3 = 12            
E280300C
// SUB R7, R3, #9 ; R7 = 3
E2437009
// ORR R4, R7, R2 ; R4 = 3 OR 5 = 7
E1874002
// AND R5, R3, R4 ; R5 = 12 AND 7 = 4
E0035004
// ADD R5, R5, R4 ; R5 = 4 + 7 = 11
E0855004
// SUBS R8, R5, R7 ; R8 = 11 - 3 = 8, set Flags
E0558007
// BEQ END ; shouldn't be taken
0A00000C
// SUBS R8, R3, R4 ; R8 = 12 - 7 = 5
E0538004
// BGE AROUND ; should be taken
AA000000
// ADD R5, R0, #0 ; should be ski pped
E2805000
// AROUND SUBS R8, R7, R2 ; R8 = 3 - 5 = -2, set Flags
E0578002
// ADDLT R7, R5, #1 ; R7 = 11 + 1 = 12
B2857001
// SUB R7, R7, R2 ; R7 = 12 - 5 = 7
E0477002
// STR R7, [R3, #84] ; mem[12+84] = 7
E5837054
// LDR R2, [R0, #96] ; R2 = mem[96] = 7
E5902060
// ADD R15, R15, R0 ; PC = PC+8 (skips next)
E08FF000
// ADD R2, R0, #14 ; shouldn't happen
E280200E
// B END ; always taken
EA000001
// ADD R2, R0, #13 ; shouldn't happen
E280200D
// ADD R2, R0, #10 ; shouldn't happen
E280200A
// STR R2, [R0, #100] ; mem[100] = 7
E5802064
